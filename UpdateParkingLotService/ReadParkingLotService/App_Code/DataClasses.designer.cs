#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ParkingLotDB")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertParkingSpace(ParkingSpace instance);
  partial void UpdateParkingSpace(ParkingSpace instance);
  partial void DeleteParkingSpace(ParkingSpace instance);
  partial void InsertParkingLot(ParkingLot instance);
  partial void UpdateParkingLot(ParkingLot instance);
  partial void DeleteParkingLot(ParkingLot instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ParkingLotDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Car> Cars
	{
		get
		{
			return this.GetTable<Car>();
		}
	}
	
	public System.Data.Linq.Table<ParkingSpace> ParkingSpaces
	{
		get
		{
			return this.GetTable<ParkingSpace>();
		}
	}
	
	public System.Data.Linq.Table<ParkingLot> ParkingLots
	{
		get
		{
			return this.GetTable<ParkingLot>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Car")]
public partial class Car
{
	
	private string _regNr;
	
	private int _fk_parkingSpaceId;
	
	public Car()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regNr", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string regNr
	{
		get
		{
			return this._regNr;
		}
		set
		{
			if ((this._regNr != value))
			{
				this._regNr = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_parkingSpaceId", DbType="Int NOT NULL")]
	public int fk_parkingSpaceId
	{
		get
		{
			return this._fk_parkingSpaceId;
		}
		set
		{
			if ((this._fk_parkingSpaceId != value))
			{
				this._fk_parkingSpaceId = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParkingSpace")]
public partial class ParkingSpace : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _x;
	
	private int _y;
	
	private int _fk_parkingLotId;
	
	private EntityRef<ParkingLot> _ParkingLot;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnxChanging(int value);
    partial void OnxChanged();
    partial void OnyChanging(int value);
    partial void OnyChanged();
    partial void Onfk_parkingLotIdChanging(int value);
    partial void Onfk_parkingLotIdChanged();
    #endregion
	
	public ParkingSpace()
	{
		this._ParkingLot = default(EntityRef<ParkingLot>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_x", DbType="Int NOT NULL")]
	public int x
	{
		get
		{
			return this._x;
		}
		set
		{
			if ((this._x != value))
			{
				this.OnxChanging(value);
				this.SendPropertyChanging();
				this._x = value;
				this.SendPropertyChanged("x");
				this.OnxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_y", DbType="Int NOT NULL")]
	public int y
	{
		get
		{
			return this._y;
		}
		set
		{
			if ((this._y != value))
			{
				this.OnyChanging(value);
				this.SendPropertyChanging();
				this._y = value;
				this.SendPropertyChanged("y");
				this.OnyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_parkingLotId", DbType="Int NOT NULL")]
	public int fk_parkingLotId
	{
		get
		{
			return this._fk_parkingLotId;
		}
		set
		{
			if ((this._fk_parkingLotId != value))
			{
				if (this._ParkingLot.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onfk_parkingLotIdChanging(value);
				this.SendPropertyChanging();
				this._fk_parkingLotId = value;
				this.SendPropertyChanged("fk_parkingLotId");
				this.Onfk_parkingLotIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParkingLot_ParkingSpace", Storage="_ParkingLot", ThisKey="fk_parkingLotId", OtherKey="id", IsForeignKey=true)]
	public ParkingLot ParkingLot
	{
		get
		{
			return this._ParkingLot.Entity;
		}
		set
		{
			ParkingLot previousValue = this._ParkingLot.Entity;
			if (((previousValue != value) 
						|| (this._ParkingLot.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ParkingLot.Entity = null;
					previousValue.ParkingSpaces.Remove(this);
				}
				this._ParkingLot.Entity = value;
				if ((value != null))
				{
					value.ParkingSpaces.Add(this);
					this._fk_parkingLotId = value.id;
				}
				else
				{
					this._fk_parkingLotId = default(int);
				}
				this.SendPropertyChanged("ParkingLot");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParkingLot")]
public partial class ParkingLot : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _address;
	
	private EntitySet<ParkingSpace> _ParkingSpaces;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    #endregion
	
	public ParkingLot()
	{
		this._ParkingSpaces = new EntitySet<ParkingSpace>(new Action<ParkingSpace>(this.attach_ParkingSpaces), new Action<ParkingSpace>(this.detach_ParkingSpaces));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string address
	{
		get
		{
			return this._address;
		}
		set
		{
			if ((this._address != value))
			{
				this.OnaddressChanging(value);
				this.SendPropertyChanging();
				this._address = value;
				this.SendPropertyChanged("address");
				this.OnaddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParkingLot_ParkingSpace", Storage="_ParkingSpaces", ThisKey="id", OtherKey="fk_parkingLotId")]
	public EntitySet<ParkingSpace> ParkingSpaces
	{
		get
		{
			return this._ParkingSpaces;
		}
		set
		{
			this._ParkingSpaces.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ParkingSpaces(ParkingSpace entity)
	{
		this.SendPropertyChanging();
		entity.ParkingLot = this;
	}
	
	private void detach_ParkingSpaces(ParkingSpace entity)
	{
		this.SendPropertyChanging();
		entity.ParkingLot = null;
	}
}
#pragma warning restore 1591
